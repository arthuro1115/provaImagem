import cv2
import numpy as np
from matplotlib import pyplot as plt
from sys import argv
import math

#-------------------------------------------------------------------------------------------
try:

    from PIL import Image
except ImportError:
    import Image
    
import pytesseract
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract'


#thresholding
def thresholding(image):
    return cv2.threshold(image, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)[1]



#------------------------------------------------------------------------------------------
#Ajusta o angulo da imagem e a recorta

def selectImage(arquivo,valor):
    cv2.destroyAllWindows()
    original = cv2.imread(arquivo) #colorida
    img = cv2.imread(arquivo,0) #monocromática = binária
    (alt, lar) = img.shape[:2] #captura altura e largura
    ret, imgT = cv2.threshold(img, 220, 255, cv2.THRESH_BINARY)#230

    ############ descobrindo a inclinação da imagem
    p1=0
    p2=0
    xi=lar
    inc=0

    for y in range (0,alt,1):
        for x in range (0,lar,1):
            cor = imgT[y,x] 
            if cor!=255 and(p1==0): 
                ponto1=(x,y)
                xi=x
                p1=1
                if x>(lar/2):
                    inc=1 # para saber se a inclinação é positiva ou negativa
                            
            if (p1==1) and (inc==1) and (cor!=255) and (x<xi):
                ponto2=(x,y)
                xi=x
                
            if (p1==1) and (inc==0) and (cor!=255) and (x>xi):
                ponto2=(x,y)
                xi=x

    #cv2.circle(original, (ponto1), 5, (0, 255, 0), -1)
    #cv2.circle(original, (ponto2), 5, (0, 255, 0), -1)

    #cv2.imshow("Imagem original com marcações", original)
                           
    angulo = math.atan2 (ponto1[1]-ponto2[1],ponto1[0]-ponto2[0])
    if inc==1:
        angulo = math.degrees(angulo)
    if inc==0:
        angulo = math.degrees(angulo)+180
        aux=ponto1
        ponto1=ponto2
        ponto2=aux
        
    print ('Inclinacao = ', angulo)

    ############ girando a imagem monocromatica          
    M = cv2.getRotationMatrix2D(ponto1, angulo, 1.0) 
    img_rotacionada = cv2.warpAffine(imgT, M, (lar, alt))
    #cv2.imshow("Imagem rotacionada", img_rotacionada)

    ############ girando a imagem original  
    original_rotacionada = cv2.warpAffine(original, M, (lar, alt))
    #cv2.imshow("Original rotacionada", original_rotacionada)

    ######### cortando a imagem original
    pontoinicial=ponto1
    larguraPlaca = 602
    alturaPlaca = 295

    xi=pontoinicial[0]-larguraPlaca
    xf=pontoinicial[0]
    yi=pontoinicial[1]
    yf=pontoinicial[1]+alturaPlaca

    recorte = original_rotacionada[yi:yf,xi:xf]
    #cv2.imshow("Recorte da imagem", recorte)
    cv2.imwrite(valor, recorte) #salva no disco

    cv2.waitKey(0)

#----------------------------------------------------------------------------------------------------------------------

#Passa como parametro o Diretorio da Imagem Recortada e reconhece o Texto
def lerCodigoPlaca(slideEditText):
   
    slide1 = cv2.imread(slideEditText)

    cv2.imshow('Mostra Slide Editado',slide1 )

    ##Tratamento da Imagem para reconhecer as Letras
    print(slideEditText)
    a=(pytesseract.image_to_string(Image.open(slideEditText)))
    a= a.replace ('\n','')
    print('Reconhecido: ', a)
    print ();

    
#-----------------------------------------------------------------------------------------------------------------------
#Gabarito Ler Letras da Imagem
#AB01
#AB02
#AC01
#AC02    
#Comparar com os gabaritos
def compararGabaritos(a):

    gabAceitosAB01 = {'AB01'}
    #gabAceitos = {'AB01','AB02','AC01','AC02'}
    #gabAceitos = {'AB01','AB02','AC01','AC02'}
    #gabAceitos = {'AB01','AB02','AC01','AC02'}

    if a in gabAceitosAB01: print("DEUCERTO")
    else: print("ferro")
        

#-----------------------------------------------------------------------------------------------------------------------
#Checar se as duas imagens são iguais
def compararImagens(imageRecortada, imageGabarito):
    original = cv2.imread(imageGabarito)
    duplicate = cv2.imread(imageRecortada)

    
    if original.shape == duplicate.shape:
        print("As Imagens Possuem o mesmo tamanho e canal de cores")
    #aq
    difference = cv2.subtract(duplicate, original)

    contador = 0


#---------------------------------------------------------------------

    b, g, r = cv2.split(difference)

    for y in range (0,original.shape[0],1):
        for x in range (0,original.shape[1],1):
            if b[y,x] >= 10 or g[y,x] >= 10 or r[y,x] >= 10:
                duplicate [y,x]=(0,0,255)
                contador = contador + 1

    #---------------------------------------------------------------------
    tolerancia10 = (original.shape[0] * original.shape[1])*0.1

    print("cont:",contador)
    print("tolerancia:",tolerancia10)

    if contador <= tolerancia10:
        print("Pelo menos 90% Iguais")

    if contador > tolerancia10:
        print("Diferentes")


    cv2.imshow("Original", original)
    cv2.imshow("Duplicate", duplicate)

    cv2.waitKey(0)
    cv2.destroyAllWindows()

#----------------------------------------------------------------------------------------------------------------------

def blackWhite(imgSlide,imgGab,newSlide, newGab):

    image1 = cv2.imread(imgSlide)
    image2 = cv2.imread(imgGab)

    ##### Tratamento da imagem ######
    image1 = cv2.cvtColor(image1, cv2.COLOR_BGR2GRAY)
    thresh = thresholding(image1)
    #cv2.imshow('Thresh',image1 )
    cv2.imwrite(newSlide, image1)

    ##### Tratamento da imagem ######
    image2 = cv2.cvtColor(image2, cv2.COLOR_BGR2GRAY)
    thresh = thresholding(image2)
    #cv2.imshow('Thresh2',image2 )
    cv2.imwrite(newGab, image2)
    




#-----------------------------------------------------------------------------------------------------------------------

#Gabarito Diretorio
gabDirSlideAB01 = 'Gabarito AB01.jpg'
gabDirSlideAB02 = 'Gabarito AB02.jpg'
gabDirSlideAC01 = 'Gabarito AC01.jpg'
gabDirSlideAC02 = 'Gabarito AC02.jpg'

#Gabarito Ler Letras da Imagem
#AB01
#AB02
#AC01
#AC02

#1)Passo Recortar e Ajustar Todas As Imagens

#Adicionar as Imagens e seus diretorios
#Errradas
slide5EditError = 'Slide5editError.jpg'
slide2Edit = 'Slide2edit.jpg'
#Corretas
slide5Edit = 'Slide5edit.jpg'
slide10Edit = 'Slide10edit.jpg'

#Corretas
print('Corretas')
print('Slide 5')
selectImage('FotosPlacas/Slide5.jpg', slide5Edit)
print('Slide 10')
selectImage('FotosPlacas/Slide10.jpg', slide10Edit)
#Errradas
print('Erradas')
print('Slide 5')
selectImage('FotosPlacasComErro/Slide5.jpg', slide5EditError)
print('Slide 2')
selectImage('FotosPlacasComErro/Slide2.jpg', slide2Edit)


print('')
#2) Indentificar Placas
#Corretas
lerCodigoPlaca(slide5Edit)
lerCodigoPlaca(slide10Edit)

#Erradas
lerCodigoPlaca(slide5EditError)
lerCodigoPlaca(slide2Edit)

#3)Tratamento Preto
#Corretas
blackWhite(slide5Edit, gabDirSlideAB01,'slide5CEditBW.jpg','gabDirSlideAB01BW.jpg')
blackWhite(slide10Edit, gabDirSlideAB02,'slide10EditBW.jpg','gabDirSlideAB02BW.jpg')

#Erradas
blackWhite(slide5EditError, gabDirSlideAB01,'slide5EEditBW.jpg','gabDirSlideAB01BW.jpg')
blackWhite(slide2Edit, gabDirSlideAB02,'slide2EditBW.jpg','gabDirSlideAB02BW.jpg')

print('')
#4) Comparar Com os possiveis Gabaritos
#Corretas
print('Corretas')
print('slide 5')
compararImagens('slide5CEditBW.jpg','gabDirSlideAB01BW.jpg')
print('slide 10')
compararImagens('slide10EditBW.jpg','gabDirSlideAB02BW.jpg')
#Erradas
print('Erradas')
print('slide 5')
compararImagens('slide5EEditBW.jpg','gabDirSlideAB01BW.jpg')
print('slide 2')
compararImagens('slide2EditBW.jpg','gabDirSlideAB02BW.jpg')

#5)






#---------------------------------------------------------------------------------------------------------------------------


#lerCodigoPlaca(slide5Edit)

#blackWhite(slide5Edit, gabDirSlideAB01)

#compararImagens('Slide5EditBW.jpg', 'SlideGabBW.jpg')

#----------------------------------------------------------------------------------------------------------------------------









